// Copyright (c) 2025 Andrea Enrico Franzoni (andreaenrico.franzoni@gmail.com)
//
// This file is part of fdagwr
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of fdagwr and associated documentation files (the fdagwr software), to deal
// fdagwr without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of fdagwr, and to permit persons to whom fdagwr is
// furnished to do so, subject to the following conditions:
//
// fdagwr IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH PPCKO OR THE USE OR OTHER DEALINGS IN
// fdagwr.


#ifndef BASIS_SMOOTHING_HPP
#define BASIS_SMOOTHING_HPP

#include "include_fdagwr.hpp"
#include "traits_fdagwr.hpp"

#include "functional_matrix_storing_type.hpp"
#include "basis_bspline.hpp"



/*!
* @brief Performing the smoothing of fdata generated by f
*/
template< typename INPUT = double, typename OUTPUT = double, class domain_type = FDAGWR_TRAITS::basis_geometry >
    requires (std::integral<INPUT> || std::floating_point<INPUT>)  &&  (std::integral<OUTPUT> || std::floating_point<OUTPUT>) && fdagwr_concepts::as_interval<domain_type>
inline
FDAGWR_TRAITS::Dense_Matrix
bspline_basis_smoothing(const FUNC_OBJ<INPUT,OUTPUT> &f,
                        const bsplines_basis<domain_type> & bsplines_basis,
                        const FDAGWR_TRAITS::Dense_Matrix & knots)
{
    //devo fare una matrice psi che non Ã¨ altro che una matrice che in ogni colonna valuta la base su tutti i knots
    //Eigen::Matrix<double, Dynamic, Dynamic> locs(n_locs + 1, 1);
    //for(int i = 0; i <= n_locs; ++i) { locs(i, 0) = (b - a)/n_locs * i; }

    Eigen::SparseMatrix<double> psi = bsplines_basis_evaluation(bsplines_basis.basis(),knots);
    Eigen::SparseQR<Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int>> solver;
    //fa (t(Psi)*Psi)^(-1) * t(Psi)
    solver.compute(psi);

    FDAGWR_TRAITS::Dense_Matrix f_evaluated(knots.rows(),1);
    for(std::size_t i = 0; i < knots.rows(); ++i){    f_evaluated(i,0) = f(knots(i,0));}
    
    return solver.solve(f_evaluated);
}



#endif  /*BASIS_SMOOTHING_HPP*/