// Copyright (c) 2025 Andrea Enrico Franzoni (andreaenrico.franzoni@gmail.com)
//
// This file is part of fdagwr
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of fdagwr and associated documentation files (the fdagwr software), to deal
// fdagwr without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of fdagwr, and to permit persons to whom fdagwr is
// furnished to do so, subject to the following conditions:
//
// fdagwr IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH PPCKO OR THE USE OR OTHER DEALINGS IN
// fdagwr.


#ifndef BASIS_SMOOTHING_HPP
#define BASIS_SMOOTHING_HPP

#include "include_fdagwr.hpp"
#include "traits_fdagwr.hpp"

#include "functional_matrix.hpp"
#include "basis_include.hpp"

#include <cassert>


/*!
* @brief Performing the smoothing of fdata generated by f
* @param f a function outputting the evaluations of the fdata in correspondence of the knots
* @param basis system of basis (bsplines or constant)
* @param knots knots over which evaluating the basis, and for which it is available the evaluation of the functional datum
* @return a dense matrix of dimension n_basis x 1, with the coefficient of the basis expansion
*/
template< typename INPUT = double, typename OUTPUT = double, class domain_type = FDAGWR_TRAITS::basis_geometry >
    requires (std::integral<INPUT> || std::floating_point<INPUT>)  &&  (std::integral<OUTPUT> || std::floating_point<OUTPUT>) && fdagwr_concepts::as_interval<domain_type>
inline
FDAGWR_TRAITS::Dense_Matrix
basis_smoothing_fdatum(const FUNC_OBJ<INPUT,OUTPUT> &f,
                       const basis_base_class<domain_type> & basis,
                       const FDAGWR_TRAITS::Dense_Matrix & knots)
{
    //devo fare una matrice psi che non è altro che una matrice che in ogni colonna valuta la base su tutti i knots
    //Eigen::Matrix<double, Dynamic, Dynamic> locs(n_locs + 1, 1);
    //for(int i = 0; i <= n_locs; ++i) { locs(i, 0) = (b - a)/n_locs * i; }

    //bsplines
    if(basis.type() == FDAGWR_BASIS_TYPES::_bsplines_)
    {
        //psi: an knots.size() x number of basis matrix: each row represents a knot, every column a basis: contains its evaluation
        Eigen::SparseMatrix<double> psi = basis.eval_base_on_locs(knots);
        Eigen::SparseQR<Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int>> solver;
        //performs (t(Psi)*Psi)^(-1) * t(Psi)
        solver.compute(psi);

        FDAGWR_TRAITS::Dense_Matrix f_evaluated(knots.rows(),1);
        for(std::size_t i = 0; i < knots.rows(); ++i){    f_evaluated(i,0) = f(knots(i,0));}
    
        return solver.solve(f_evaluated);
    }
    //constant basis
    if(basis.type() == FDAGWR_BASIS_TYPES::_constant_)
    {
        FDAGWR_TRAITS::Dense_Matrix c = FDAGWR_TRAITS::Dense_Matrix::Zero(1,1);
        for(std::size_t i = 0; i < knots.rows(); ++i){    c(0,0) += f(knots(i,0));}

        return c/knots.rows();
    }
}





/*!
* @brief Fa lo smoothing di un più fd, dando indietro una matrice in cui ogni riga rappresenta una base, ogni colonna un'unità statistica, tutte però rispetto alla medesima base
* @param fd è un vettore colonna contenente funzioni
*/
template< typename INPUT = double, typename OUTPUT = double, class domain_type = FDAGWR_TRAITS::basis_geometry >
    requires (std::integral<INPUT> || std::floating_point<INPUT>)  &&  (std::integral<OUTPUT> || std::floating_point<OUTPUT>) && fdagwr_concepts::as_interval<domain_type>
inline
FDAGWR_TRAITS::Dense_Matrix
basis_smoothing_fdata(const functional_matrix<INPUT,OUTPUT> &fd,
                      const basis_base_class<domain_type> & basis,
                      const FDAGWR_TRAITS::Dense_Matrix & knots)
{
    assert(fd.cols() == 1);

    FDAGWR_TRAITS::Dense_Matrix c(basis.number_of_basis(),fd.rows());

    for (std::size_t i = 0; i < fd.rows(); ++i){ c.col(i) = basis_smoothing_fdatum(fd(i,0),basis,knots).col(0);}
    
    return c;
}






/*!
* @brief Performing the smoothing of fdata, discrete evaluations, relatively to the abscissa in knots, given by f_ev
* @param f_ev an n_locs x 1 matrix with the evaluations of the fdata in correspondence of the knots
* @param basis system of basis (bsplines or constant)
* @param knots knots over which evaluating the basis, and for which it is available the evaluation of the functional datum
* @return a dense matrix of dimension n_basis x 1, with the coefficient of the basis expansion
* @note FUNZIONA
*/
template< typename INPUT = double, typename OUTPUT = double, class domain_type = FDAGWR_TRAITS::basis_geometry >
    requires (std::integral<INPUT> || std::floating_point<INPUT>)  &&  (std::integral<OUTPUT> || std::floating_point<OUTPUT>) && fdagwr_concepts::as_interval<domain_type>
inline
FDAGWR_TRAITS::Dense_Matrix
basis_smoothing_fdatum_ev(const FDAGWR_TRAITS::Dense_Matrix & f_ev,
                          const basis_base_class<domain_type> & basis,
                          const FDAGWR_TRAITS::Dense_Matrix & knots)
{
    assert((f_ev.rows() == knots.rows()) && (f_ev.cols() == 1) && (knots.cols() == 1));

    //bsplines
    if(basis.type() == FDAGWR_BASIS_TYPES::_bsplines_)
    {
        //psi: an knots.size() x number of basis matrix: each row represents a knot, every column a basis: contains its evaluation
        Eigen::SparseMatrix<double> psi = basis.eval_base_on_locs(knots);
        Eigen::SparseQR<Eigen::SparseMatrix<double>, Eigen::COLAMDOrdering<int>> solver;
        //performs (t(Psi)*Psi)^(-1) * t(Psi)
        solver.compute(psi);

        return solver.solve(f_ev);
    }
    //constant basis
    if(basis.type() == FDAGWR_BASIS_TYPES::_constant_)
    {
        FDAGWR_TRAITS::Dense_Matrix c = FDAGWR_TRAITS::Dense_Matrix::Zero(1,1);
        for(std::size_t i = 0; i < f_ev.rows(); ++i){    c(0,0) += f_ev(i,0);}

        return c/f_ev.rows();
    }
}



#endif  /*BASIS_SMOOTHING_HPP*/