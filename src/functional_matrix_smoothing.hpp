// Copyright (c) 2025 Andrea Enrico Franzoni (andreaenrico.franzoni@gmail.com)
//
// This file is part of fdagwr
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of fdagwr and associated documentation files (the fdagwr software), to deal
// fdagwr without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of fdagwr, and to permit persons to whom fdagwr is
// furnished to do so, subject to the following conditions:
//
// fdagwr IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH PPCKO OR THE USE OR OTHER DEALINGS IN
// fdagwr.


#ifndef FUNCTIONAL_MATRIX_SMOOTHING_HPP
#define FUNCTIONAL_MATRIX_SMOOTHING_HPP

#include "include_fdagwr.hpp"
#include "traits_fdagwr.hpp"

#include "functional_matrix.hpp"
#include "basis_include.hpp"

#include <cassert>


/*!
* @brief Performing the smoothing of fdata generated by f
* @param f a function outputting the evaluations of the fdata in correspondence of the knots
* @param basis system of basis (bsplines or constant)
* @param knots knots over which evaluating the basis, and for which it is available the evaluation of the functional datum
* @return a dense matrix of dimension n_basis x 1, with the coefficient of the basis expansion
*/
template< typename INPUT = double, typename OUTPUT = double, class domain_type = FDAGWR_TRAITS::basis_geometry >
    requires (std::integral<INPUT> || std::floating_point<INPUT>)  &&  (std::integral<OUTPUT> || std::floating_point<OUTPUT>) && fdagwr_concepts::as_interval<domain_type>
inline
FDAGWR_TRAITS::Dense_Matrix
f_smoothing(const FUNC_OBJ<INPUT,OUTPUT> &f,
            const basis_base_class<domain_type> & basis,
            const FDAGWR_TRAITS::Dense_Matrix & knots)
{
    //evaluating the function all along the knots
    FDAGWR_TRAITS::Dense_Matrix f_ev(knots.rows(),1);
    for(std::size_t i = 0; i < knots.rows(); ++i){    f_ev(i,0) = f(knots(i,0));}

    return basis.smoothing(f_ev,knots);
}

/*!
* @brief Fa lo smoothing di un più fd, dando indietro una matrice in cui ogni riga rappresenta una base, ogni colonna un'unità statistica, tutte però rispetto alla medesima base
* @param fd è un vettore colonna contenente funzioni
* @return a num basis x num functions, where el(i,j) is the coefficient of basis i-th of the basis expansion of the funciton j-th
*/
template< typename INPUT = double, typename OUTPUT = double, class domain_type = FDAGWR_TRAITS::basis_geometry >
    requires (std::integral<INPUT> || std::floating_point<INPUT>)  &&  (std::integral<OUTPUT> || std::floating_point<OUTPUT>) && fdagwr_concepts::as_interval<domain_type>
inline
FDAGWR_TRAITS::Dense_Matrix
fm_smoothing(const functional_matrix<INPUT,OUTPUT> &fm,
             const basis_base_class<domain_type> & basis,
             const FDAGWR_TRAITS::Dense_Matrix & knots)
{
    assert(fm.cols() == 1);

    std::size_t num_basis = basis.number_of_basis();
    std::size_t num_f = fm.rows();

    //the result is num basis x num functions
    FDAGWR_TRAITS::Dense_Matrix c(num_basis,num_f);

    for (std::size_t i = 0; i < num_f; ++i){ c.col(i) = f_smoothing(fm(i,0),basis,knots).col(0);}
    
    return c;
}

#endif  /*FUNCTIONAL_MATRIX_SMOOTHING_HPP*/