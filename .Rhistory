ylim(0,error_max) +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.text.x = element_text(size=22),
axis.title.x = element_text(size=22),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22),
legend.title = element_text(size=22),
legend.text = element_text(size=22),
legend.position="none",
legend.direction = "horizontal") +
guides(fill=guide_legend(nrow=1, byrow=TRUE))
pgplot + theme(legend.position="none")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_velocity,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_velocity,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
plot1 <- ggplot(df_long, aes(x = x, y = Error, color = Predictor)) +
scale_color_manual( values = c("PPC" = "blue", "MP" = "red", "NP" = "orange"), labels = c("MP", "NP", "PPC")) +
geom_line(size = 0.35) +
#geom_point(size = 0.3) +
theme_minimal() +
labs(title = "",
x = "FTS time instant",
y = "En",
color = "Predictor") +
theme(legend.position = "top")+
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 10, face = "bold"))
df_single <- data.frame(
x = time_instant_velocity,
y = mean_for_surface
)
# Creare il line chart
plot_mean = ggplot(df_single, aes(x = x, y = y)) +
geom_line(color = "black", size = 0.5, na.rm = TRUE) +
ylim(z_min_velocity_gd, z_max_velocity_gd)   +
theme_minimal() +
geom_hline( yintercept = c(0.5), color = "red" ) +
labs(title = "",
x = "FTS time instant",
y = "Instant-wise\n surface mean\n [cm/(12 days)]") +
theme(legend.position = "none") +
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 7.5, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
plot_err_mean <-  plot1 + plot_mean + plot_layout(nrow = 2) + plot_annotation( title = title_plt, theme = theme(plot.title = element_text(size=20, face = "bold",hjust = 0.5)) )
plot_err_mean
if(save_res){
ggsave(filename = file_saving_err_dyn_en_comp,
plot = plot_err_mean,
device = NULL,
path = dir_storing_err_dyn,
scale = 1,
width = width_used,
height = height_used,
dpi = dpi_used)}
##acceleration
quantity = "acceleration"
error_ppc = ppc_pred_west_acc
error_mp  = mp_pred_west_acc
error_np  = np_pred_west_acc
title_plt = paste0("Prediction error, ",paste0(paste0("GD ", paste0(quantity,", ")),paste0(zone," zone")))
#bound of errors
error_max = max(max(error_ppc$en,error_mp$en,error_np$en),max(error_ppc$rn,error_mp$rn,error_np$rn))
#mean value instant-wise
mean_for_surface = mean_acceleration_gd_per_instants_west
#storing
file_saving_err_comp_en = paste0(paste0("en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_comp_rn = paste0(paste0("rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
dir_storing_err_comp = paste0(path_stor_res_err_comp,paste0("/",zone))
file_saving_err_dyn_en = paste0(paste0("error_dynamic_en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_en_comp = paste0(paste0("comp_error_dynamic_en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_rn = paste0(paste0("error_dynamic_rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_rn_comp = paste0(paste0("comp_error_dynamic_rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
dir_storing_err_dyn  = paste0(path_stor_res_err_dyn,paste0("/",zone))
## EN
## BoxPlot
en_PPC = error_ppc$en
en_MP  = error_mp$en
en_NP  = error_np$en
summary(en_PPC)
sd(en_PPC)
summary(en_MP)
sd(en_MP)
summary(en_NP)
sd(en_NP)
N = length(en_PPC)
err_en <- c(en_PPC, en_MP, en_NP)
method <- rep(prediction_method, each=N)
En <- data.frame(method, err_en)
method_order<- prediction_method
En.box <- En %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(En.box, aes(x=method, y=err_en, fill=method)) +
geom_boxplot() + ggtitle(title_plt)
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "") +
ylim(0,error_max) +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.text.x = element_text(size=22),
axis.title.x = element_text(size=22),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22),
legend.title = element_text(size=22),
legend.text = element_text(size=22),
legend.position="none",
legend.direction = "horizontal") +
guides(fill=guide_legend(nrow=1, byrow=TRUE))
pgplot + theme(legend.position="none")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_acceleration,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_acceleration,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
plot1 <- ggplot(df_long, aes(x = x, y = Error, color = Predictor)) +
scale_color_manual( values = c("PPC" = "blue", "MP" = "red", "NP" = "orange"), labels = c("MP", "NP", "PPC")) +
geom_line(size = 0.35) +
#geom_point(size = 0.3) +
theme_minimal() +
labs(title = "",
x = "FTS time instant",
y = "En",
color = "Predictor") +
theme(legend.position = "top")+
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 10, face = "bold"))
df_single <- data.frame(
x = time_instant_acceleration,
y = mean_for_surface
)
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_acceleration,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
plot1 <- ggplot(df_long, aes(x = x, y = Error, color = Predictor)) +
scale_color_manual( values = c("PPC" = "blue", "MP" = "red", "NP" = "orange"), labels = c("MP", "NP", "PPC")) +
geom_line(size = 0.35) +
#geom_point(size = 0.3) +
theme_minimal() +
labs(title = "",
x = "FTS time instant",
y = "En",
color = "Predictor") +
theme(legend.position = "top")+
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 10, face = "bold"))
df_single <- data.frame(
x = time_instant_acceleration,
y = mean_for_surface
)
# Creare il line chart
plot_mean = ggplot(df_single, aes(x = x, y = y)) +
geom_line(color = "black", size = 0.5, na.rm = TRUE) +
ylim(z_min_velocity_gd, z_max_velocity_gd)   +
theme_minimal() +
geom_hline( yintercept = c(-0.5,0.5), color = "red" ) +
labs(title = "",
x = "FTS time instant",
y = "Instant-wise\n surface mean\n [cm/(12 days)^2]") +
theme(legend.position = "none") +
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 7.5, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
plot_err_mean <-  plot1 + plot_mean + plot_layout(nrow = 2) + plot_annotation( title = title_plt, theme = theme(plot.title = element_text(size=20, face = "bold",hjust = 0.5)) )
plot_err_mean
if(save_res){
ggsave(filename = file_saving_err_dyn_en_comp,
plot = plot_err_mean,
device = NULL,
path = dir_storing_err_dyn,
scale = 1,
width = width_used,
height = height_used,
dpi = dpi_used)}
##-----EAST ZONE-----
zone = "east"
##velocity
quantity = "velocity"
error_ppc = ppc_pred_east_vel
error_mp  = mp_pred_east_vel
error_np  = np_pred_east_vel
title_plt = paste0("Prediction error, ",paste0(paste0("GD ", paste0(quantity,", ")),paste0(zone," zone")))
#bound of errors
error_max = max(max(error_ppc$en,error_mp$en,error_np$en),max(error_ppc$rn,error_mp$rn,error_np$rn))
#mean value instant-wise
mean_for_surface = mean_velocity_gd_per_instants_east
#storing
file_saving_err_comp_en = paste0(paste0("en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_comp_rn = paste0(paste0("rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
dir_storing_err_comp = paste0(path_stor_res_err_comp,paste0("/",zone))
file_saving_err_dyn_en = paste0(paste0("error_dynamic_en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_en_comp = paste0(paste0("comp_error_dynamic_en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_rn = paste0(paste0("error_dynamic_rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_rn_comp = paste0(paste0("comp_error_dynamic_rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
dir_storing_err_dyn  = paste0(path_stor_res_err_dyn,paste0("/",zone))
## EN
## BoxPlot
en_PPC = error_ppc$en
en_MP  = error_mp$en
en_NP  = error_np$en
summary(en_PPC)
sd(en_PPC)
summary(en_MP)
sd(en_MP)
summary(en_NP)
sd(en_NP)
N = length(en_PPC)
err_en <- c(en_PPC, en_MP, en_NP)
method <- rep(prediction_method, each=N)
En <- data.frame(method, err_en)
method_order<- prediction_method
En.box <- En %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(En.box, aes(x=method, y=err_en, fill=method)) +
geom_boxplot() + ggtitle(title_plt)
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "") +
ylim(0,error_max) +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.text.x = element_text(size=22),
axis.title.x = element_text(size=22),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22),
legend.title = element_text(size=22),
legend.text = element_text(size=22),
legend.position="none",
legend.direction = "horizontal") +
guides(fill=guide_legend(nrow=1, byrow=TRUE))
pgplot + theme(legend.position="none")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_velocity,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_velocity,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
plot1 <- ggplot(df_long, aes(x = x, y = Error, color = Predictor)) +
scale_color_manual( values = c("PPC" = "blue", "MP" = "red", "NP" = "orange"), labels = c("MP", "NP", "PPC")) +
geom_line(size = 0.35) +
#geom_point(size = 0.3) +
theme_minimal() +
labs(title = "",
x = "FTS time instant",
y = "En",
color = "Predictor") +
theme(legend.position = "top")+
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 10, face = "bold"))
df_single <- data.frame(
x = time_instant_velocity,
y = mean_for_surface
)
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_velocity,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_vel-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
plot1 <- ggplot(df_long, aes(x = x, y = Error, color = Predictor)) +
scale_color_manual( values = c("PPC" = "blue", "MP" = "red", "NP" = "orange"), labels = c("MP", "NP", "PPC")) +
geom_line(size = 0.35) +
#geom_point(size = 0.3) +
theme_minimal() +
labs(title = "",
x = "FTS time instant",
y = "En",
color = "Predictor") +
theme(legend.position = "top")+
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 10, face = "bold"))
df_single <- data.frame(
x = time_instant_velocity,
y = mean_for_surface
)
# Creare il line chart
plot_mean = ggplot(df_single, aes(x = x, y = y)) +
geom_line(color = "black", size = 0.5, na.rm = TRUE) +
ylim(z_min_velocity_gd, z_max_velocity_gd)   +
theme_minimal() +
geom_hline( yintercept = c(0.5), color = "red" ) +
labs(title = "",
x = "FTS time instant",
y = "Instant-wise\n surface mean\n [cm/(12 days)]") +
theme(legend.position = "none") +
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 7.5, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
plot_err_mean <-  plot1 + plot_mean + plot_layout(nrow = 2) + plot_annotation( title = title_plt, theme = theme(plot.title = element_text(size=30, face = "bold",hjust = 0.5)) )
plot_err_mean
plot_err_mean <-  plot1 + plot_mean + plot_layout(nrow = 2) + plot_annotation( title = title_plt, theme = theme(plot.title = element_text(size=20, face = "bold",hjust = 0.5)) )
plot_err_mean
plot_err_mean <-  plot1 + plot_mean + plot_layout(nrow = 2) + plot_annotation( title = title_plt, theme = theme(plot.title = element_text(size=20, face = "bold",hjust = 0.5)) )
if(save_res){
ggsave(filename = file_saving_err_dyn_en_comp,
plot = plot_err_mean,
device = NULL,
path = dir_storing_err_dyn,
scale = 1,
width = width_used,
height = height_used,
dpi = dpi_used)}
##acceleration
quantity = "acceleration"
error_ppc = ppc_pred_east_acc
error_mp  = mp_pred_east_acc
error_np  = np_pred_east_acc
title_plt = paste0("Prediction error, ",paste0(paste0("GD ", paste0(quantity,", ")),paste0(zone," zone")))
#bound of errors
error_max = max(max(error_ppc$en,error_mp$en,error_np$en),max(error_ppc$rn,error_mp$rn,error_np$rn))
#mean value instant-wise
mean_for_surface = mean_acceleration_gd_per_instants_east
#storing
file_saving_err_comp_en = paste0(paste0("en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_comp_rn = paste0(paste0("rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
dir_storing_err_comp = paste0(path_stor_res_err_comp,paste0("/",zone))
file_saving_err_dyn_en = paste0(paste0("error_dynamic_en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_en_comp = paste0(paste0("comp_error_dynamic_en_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_rn = paste0(paste0("error_dynamic_rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
file_saving_err_dyn_rn_comp = paste0(paste0("comp_error_dynamic_rn_",zone),paste0("_zone_",paste0(quantity,format_file)))
dir_storing_err_dyn  = paste0(path_stor_res_err_dyn,paste0("/",zone))
## EN
## BoxPlot
en_PPC = error_ppc$en
en_MP  = error_mp$en
en_NP  = error_np$en
summary(en_PPC)
sd(en_PPC)
summary(en_MP)
sd(en_MP)
summary(en_NP)
sd(en_NP)
N = length(en_PPC)
err_en <- c(en_PPC, en_MP, en_NP)
method <- rep(prediction_method, each=N)
En <- data.frame(method, err_en)
method_order<- prediction_method
En.box <- En %>% mutate(method=factor(x=method, levels=method_order))
pgplot <- ggplot(En.box, aes(x=method, y=err_en, fill=method)) +
geom_boxplot() + ggtitle(title_plt)
pgplot <- pgplot +
theme_bw() +
labs(x="", y="En", fill = "") +
ylim(0,error_max) +
theme(plot.title = element_text(face="bold", hjust=0.5, size=22),
axis.text.x = element_text(size=22),
axis.title.x = element_text(size=22),
axis.text.y = element_text(size=22),
axis.title.y = element_text(size=22),
legend.title = element_text(size=22),
legend.text = element_text(size=22),
legend.position="none",
legend.direction = "horizontal") +
guides(fill=guide_legend(nrow=1, byrow=TRUE))
pgplot + theme(legend.position="none")
#error dynamic compared to the surface mean
df <- data.frame(
x = time_instant_acceleration,  # Valori di x da 1 a 10
PPC = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_PPC),
MP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_MP),
NP = c(rep(NA,number_time_instants_acc-number_instant_predicted),en_NP)
)
df_long <- df %>%
pivot_longer(cols = -x, names_to = "Predictor", values_to = "Error")
plot1 <- ggplot(df_long, aes(x = x, y = Error, color = Predictor)) +
scale_color_manual( values = c("PPC" = "blue", "MP" = "red", "NP" = "orange"), labels = c("MP", "NP", "PPC")) +
geom_line(size = 0.35) +
#geom_point(size = 0.3) +
theme_minimal() +
labs(title = "",
x = "FTS time instant",
y = "En",
color = "Predictor") +
theme(legend.position = "top")+
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 15, face = "bold"),
legend.title = element_text(size = 10, face = "bold"))
df_single <- data.frame(
x = time_instant_acceleration,
y = mean_for_surface
)
# Creare il line chart
plot_mean = ggplot(df_single, aes(x = x, y = y)) +
geom_line(color = "black", size = 0.5, na.rm = TRUE) +
ylim(z_min_velocity_gd, z_max_velocity_gd)   +
theme_minimal() +
geom_hline( yintercept = c(-0.5,0.5), color = "red" ) +
labs(title = "",
x = "FTS time instant",
y = "Instant-wise\n surface mean\n [cm/(12 days)^2]") +
theme(legend.position = "none") +
theme(axis.title.y =  element_text(size = 10,angle = 0, vjust = 0.5, hjust = 1))+
theme(axis.text.x = element_text(size = 10, face = "bold", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 7.5, face = "bold", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"))
plot_err_mean <-  plot1 + plot_mean + plot_layout(nrow = 2) + plot_annotation( title = title_plt, theme = theme(plot.title = element_text(size=20, face = "bold",hjust = 0.5)) )
plot_err_mean
if(save_res){
ggsave(filename = file_saving_err_dyn_en_comp,
plot = plot_err_mean,
device = NULL,
path = dir_storing_err_dyn,
scale = 1,
width = width_used,
height = height_used,
dpi = dpi_used)}
setwd("~/Documents/INGV")
install.packages(c("devtools", "usethis", "roxygen2", "Rcpp"))
library(Rcpp)
library(RcppEigen)
library(usethis)
library(devtools)
library(roxygen2)
usethis::create_package("fdagwr")
usethis::use_rcpp()
Rcpp.package.skeleton("fdagwr")
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd("/Users/andreafranzoni/Documents/INGV/FunctionalMultiSourceGeographicallyWeightedRegression")
getwd()
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
library(fdagwr)
fdagwr_test_function("test")
m = fdagwr_test_function("e")
m
