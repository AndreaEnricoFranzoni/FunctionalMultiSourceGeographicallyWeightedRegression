data_dir    = paste0(working_dir,"/200_dataset_units/dataset/preprocessed_data")
setwd(working_dir)
#data generalities
load(paste0(data_dir,"/generalities.RData"))
paste0(data_dir,"/generalities.RData")
root_dir    = "/Users/andreafranzoni/Documents/Politecnico/INGV"
working_dir = paste0(root_dir,"/fdagwr_INGV_usage")
data_dir    = paste0(working_dir,"/200_units_dataset/dataset/preprocessed_data")
setwd(working_dir)
#data generalities
load(paste0(data_dir,"/generalities.RData"))
#functional response, reconstructed
load(paste0(data_dir,"/functional_response.RData"))
#functional covariates
load(paste0(data_dir,"/functional_covariates.RData"))
#coordinates
load(paste0(data_dir,"/utm_coordinates.RData"))
#wrapping for fdagwr
#NO PENALIZATION
input_fdagwr_200_units_pen_0 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = t_points[1],
right_extreme_domain = t_points[length(t_points)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0,0,0,0,0,0),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
coeff_events_cov = list( D2 = xlist$D2$coefs,
D3 = xlist$D3$coefs),
basis_types_events_cov = c("bsplines",
"bsplines"),
knots_events_cov = generalities$knots_alla_basis,
degrees_basis_events_cov = c(3,3),
n_basis_events_cov = c(15,15),
penalization_events_cov = c(0.0,0.0),
coordinates_events = coordinates_utm$UTM_events,
kernel_bandwith_events = generalities$bwd_e,
knots_beta_events_cov = generalities$knots_alla_basis,
degrees_basis_beta_events_cov = c(3,3),
n_basis_beta_events_cov = c(15,15),
coeff_stations_cov = list( reg.S = xlist$reg.S$coefs),
basis_types_stations_cov = c("constant"),
knots_stations_cov = generalities$knots_alla_basis,
degrees_basis_stations_cov = c(0),
n_basis_stations_cov = c(1),
penalization_stations_cov = c(0.0),
coordinates_stations = coordinates_utm$UTM_stations,
kernel_bandwith_stations = generalities$bwd_s,
knots_beta_stations_cov = generalities$knots_alla_basis,
degrees_basis_beta_stations_cov = c(3),
n_basis_beta_stations_cov = c(15),
n_knots_smoothing = 500,
n_intervals_trapezoidal_quadrature = 100,
target_error_trapezoidal_quadrature = 1e-3,
max_iterations_trapezoidal_quadrature = 100)
#wrapping for fdagwr
#NO PENALIZATION
input_fdagwr_200_units_pen_0 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = t_points[1],
right_extreme_domain = t_points[length(t_points)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0,0,0,0,0,0),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
coeff_events_cov = list( D2 = xlist$D2$coefs,
D3 = xlist$D3$coefs),
basis_types_events_cov = c("bsplines",
"bsplines"),
knots_events_cov = generalities$knots_alla_basis,
degrees_basis_events_cov = c(3,3),
n_basis_events_cov = c(15,15),
penalization_events_cov = c(0.0,0.0),
coordinates_events = coordinates_utm$UTM_events,
kernel_bandwith_events = generalities$bwd_e,
knots_beta_events_cov = generalities$knots_alla_basis,
degrees_basis_beta_events_cov = c(3,3),
n_basis_beta_events_cov = c(15,15),
coeff_stations_cov = list( reg.S = xlist$reg.S$coefs),
basis_types_stations_cov = c("constant"),
knots_stations_cov = generalities$knots_alla_basis,
degrees_basis_stations_cov = c(0),
n_basis_stations_cov = c(1),
penalization_stations_cov = c(0.0),
coordinates_stations = coordinates_utm$UTM_stations,
kernel_bandwith_stations = generalities$bwd_s,
knots_beta_stations_cov = generalities$knots_alla_basis,
degrees_basis_beta_stations_cov = c(3),
n_basis_beta_stations_cov = c(15),
n_knots_smoothing = 500,
n_intervals_trapezoidal_quadrature = 100,
target_error_trapezoidal_quadrature = 1e-3,
max_iterations_trapezoidal_quadrature = 100)
y_points
t_points
generalities$abscissa
generalities$abscissa[1]
generalities$abscissa[length(generalities$abscissa)]
#wrapping for fdagwr
#NO PENALIZATION
input_fdagwr_200_units_pen_0 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = generalities$abscissa[1],
right_extreme_domain = generalities$abscissa[length(generalities$abscissa)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0,0,0,0,0,0),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
coeff_events_cov = list( D2 = xlist$D2$coefs,
D3 = xlist$D3$coefs),
basis_types_events_cov = c("bsplines",
"bsplines"),
knots_events_cov = generalities$knots_alla_basis,
degrees_basis_events_cov = c(3,3),
n_basis_events_cov = c(15,15),
penalization_events_cov = c(0.0,0.0),
coordinates_events = coordinates_utm$UTM_events,
kernel_bandwith_events = generalities$bwd_e,
knots_beta_events_cov = generalities$knots_alla_basis,
degrees_basis_beta_events_cov = c(3,3),
n_basis_beta_events_cov = c(15,15),
coeff_stations_cov = list( reg.S = xlist$reg.S$coefs),
basis_types_stations_cov = c("constant"),
knots_stations_cov = generalities$knots_alla_basis,
degrees_basis_stations_cov = c(0),
n_basis_stations_cov = c(1),
penalization_stations_cov = c(0.0),
coordinates_stations = coordinates_utm$UTM_stations,
kernel_bandwith_stations = generalities$bwd_s,
knots_beta_stations_cov = generalities$knots_alla_basis,
degrees_basis_beta_stations_cov = c(3),
n_basis_beta_stations_cov = c(15),
n_knots_smoothing = 500,
n_intervals_trapezoidal_quadrature = 100,
target_error_trapezoidal_quadrature = 1e-3,
max_iterations_trapezoidal_quadrature = 100)
working_dir
save(input_fdagwr_200_units_pen_0, file = paste0(working_dir,"/200_units_dataset/dataset/data_fdagwr/input_fdagwr_200_units_pen_0.RData"))
c(0.1,0.1,0.1,0.1,0.1,0.1)
#0.1 PENALIZATION
input_fdagwr_200_units_pen_0_1 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = generalities$abscissa[1],
right_extreme_domain = generalities$abscissa[length(generalities$abscissa)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0.1,0.1,0.1,0.1,0.1,0.1),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
coeff_events_cov = list( D2 = xlist$D2$coefs,
D3 = xlist$D3$coefs),
basis_types_events_cov = c("bsplines",
"bsplines"),
knots_events_cov = generalities$knots_alla_basis,
degrees_basis_events_cov = c(3,3),
n_basis_events_cov = c(15,15),
penalization_events_cov = c(0.1,0.1),
coordinates_events = coordinates_utm$UTM_events,
kernel_bandwith_events = generalities$bwd_e,
knots_beta_events_cov = generalities$knots_alla_basis,
degrees_basis_beta_events_cov = c(3,3),
n_basis_beta_events_cov = c(15,15),
coeff_stations_cov = list( reg.S = xlist$reg.S$coefs),
basis_types_stations_cov = c("constant"),
knots_stations_cov = generalities$knots_alla_basis,
degrees_basis_stations_cov = c(0),
n_basis_stations_cov = c(1),
penalization_stations_cov = c(0.1),
coordinates_stations = coordinates_utm$UTM_stations,
kernel_bandwith_stations = generalities$bwd_s,
knots_beta_stations_cov = generalities$knots_alla_basis,
degrees_basis_beta_stations_cov = c(3),
n_basis_beta_stations_cov = c(15),
n_knots_smoothing = 500,
n_intervals_trapezoidal_quadrature = 100,
target_error_trapezoidal_quadrature = 1e-3,
max_iterations_trapezoidal_quadrature = 100)
View(input_fdagwr_200_units_pen_0_1)
save(input_fdagwr_200_units_pen_0_1, file = paste0(working_dir,"/200_units_dataset/dataset/data_fdagwr/input_fdagwr_200_units_pen_0_1.RData"))
#############################################
#### script to create a 200 fdagwr input ####
#############################################
rm(list=ls())
graphics.off()
cat("\014")
root_dir    = "/Users/andreafranzoni/Documents/Politecnico/INGV"
working_dir = paste0(root_dir,"/fdagwr_INGV_usage")
data_dir    = paste0(working_dir,"/200_units_dataset/dataset/preprocessed_data")
setwd(working_dir)
#data generalities
load(paste0(data_dir,"/generalities.RData"))
#functional response, reconstructed
load(paste0(data_dir,"/functional_response.RData"))
#functional covariates
load(paste0(data_dir,"/functional_covariates.RData"))
#coordinates
load(paste0(data_dir,"/utm_coordinates.RData"))
#wrapping for fdagwr
#NO PENALIZATION
input_FMSGWR_200_units_pen_0 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = generalities$abscissa[1],
right_extreme_domain = generalities$abscissa[length(generalities$abscissa)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0.0,0.0,0.0,0.0,0.0,0.0),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
coeff_events_cov = list( D2 = xlist$D2$coefs,
D3 = xlist$D3$coefs),
basis_types_events_cov = c("bsplines",
"bsplines"),
knots_events_cov = generalities$knots_alla_basis,
degrees_basis_events_cov = c(3,3),
n_basis_events_cov = c(15,15),
penalization_events_cov = c(0.0,0.0),
coordinates_events = coordinates_utm$UTM_events,
kernel_bandwith_events = generalities$bwd_e,
knots_beta_events_cov = generalities$knots_alla_basis,
degrees_basis_beta_events_cov = c(3,3),
n_basis_beta_events_cov = c(15,15),
coeff_stations_cov = list( reg.S = xlist$reg.S$coefs),
basis_types_stations_cov = c("constant"),
knots_stations_cov = generalities$knots_alla_basis,
degrees_basis_stations_cov = c(0),
n_basis_stations_cov = c(1),
penalization_stations_cov = c(0.0),
coordinates_stations = coordinates_utm$UTM_stations,
kernel_bandwith_stations = generalities$bwd_s,
knots_beta_stations_cov = generalities$knots_alla_basis,
degrees_basis_beta_stations_cov = c(3),
n_basis_beta_stations_cov = c(15),
in_cascade_estimation = FALSE,
n_knots_smoothing = 500,
n_intervals_quadrature = 100)
save(input_FMSGWR_200_units_pen_0, file = paste0(working_dir,"/200_units_dataset/dataset/data_fdagwr/input_FMSGWR_200_units_pen_0.RData"))
#0.1 PENALIZATION
input_FMSGWR_200_units_pen_0_1 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = generalities$abscissa[1],
right_extreme_domain = generalities$abscissa[length(generalities$abscissa)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0.1,0.1,0.1,0.1,0.1,0.1),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
coeff_events_cov = list( D2 = xlist$D2$coefs,
D3 = xlist$D3$coefs),
basis_types_events_cov = c("bsplines",
"bsplines"),
knots_events_cov = generalities$knots_alla_basis,
degrees_basis_events_cov = c(3,3),
n_basis_events_cov = c(15,15),
penalization_events_cov = c(0.1,0.1),
coordinates_events = coordinates_utm$UTM_events,
kernel_bandwith_events = generalities$bwd_e,
knots_beta_events_cov = generalities$knots_alla_basis,
degrees_basis_beta_events_cov = c(3,3),
n_basis_beta_events_cov = c(15,15),
coeff_stations_cov = list( reg.S = xlist$reg.S$coefs),
basis_types_stations_cov = c("constant"),
knots_stations_cov = generalities$knots_alla_basis,
degrees_basis_stations_cov = c(0),
n_basis_stations_cov = c(1),
penalization_stations_cov = c(0.1),
coordinates_stations = coordinates_utm$UTM_stations,
kernel_bandwith_stations = generalities$bwd_s,
knots_beta_stations_cov = generalities$knots_alla_basis,
degrees_basis_beta_stations_cov = c(3),
n_basis_beta_stations_cov = c(15),
in_cascade_estimation = FALSE,
n_knots_smoothing = 500,
n_intervals_quadrature = 100)
save(input_FMSGWR_200_units_pen_0_1, file = paste0(working_dir,"/200_units_dataset/dataset/data_fdagwr/input_FMSGWR_200_units_pen_0_1.RData"))
View(input_FMSGWR_200_units_pen_0)
#wrapping for FWR
#NO PENALIZATION
input_FWR_200_units_pen_0 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = generalities$abscissa[1],
right_extreme_domain = generalities$abscissa[length(generalities$abscissa)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0.0,0.0,0.0,0.0,0.0,0.0),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
n_intervals_quadrature = 100)
save(input_FWR_200_units_pen_0, file = paste0(working_dir,"/200_units_dataset/dataset/data_fdagwr/input_FWR_200_units_pen_0.RData"))
#0.1 PENALIZATION
input_FWR_200_units_pen_0_1 = list(y_points = functional_response$y_reconstructed,
t_points = generalities$abscissa,
left_extreme_domain = generalities$abscissa[1],
right_extreme_domain = generalities$abscissa[length(generalities$abscissa)],
coeff_y_points = functional_response$y_reconstructed_fd$coefs,
knots_y_points = generalities$knots_alla_basis,
degree_basis_y_points = 3,
n_basis_y_points = functional_response$y_reconstructed_fd$basis$nbasis,
coeff_rec_weights_y_points = functional_response$weight_rec$coefs,
degree_basis_rec_weights_y_points = 1,
n_basis_rec_weights_y_points = functional_response$weight_rec$basis$nbasis,
coeff_stationary_cov = list( intercept = xlist$intercept$coefs,
Mlow      = xlist$Mlow$coefs,
Mhigh     = xlist$Mhigh$coefs,
reg.SS    = xlist$reg.SS$coefs,
reg.TF    = xlist$reg.TF$coefs,
D1        = xlist$D1$coefs),
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines"),
knots_stationary_cov = generalities$knots_alla_basis,
degrees_basis_stationary_cov = c(0,2,2,0,0,3),
n_basis_stationary_cov = c(1,14,14,1,1,15),
penalization_stationary_cov = c(0.1,0.1,0.1,0.1,0.1,0.1),
knots_beta_stationary_cov = generalities$knots_alla_basis,
degrees_basis_beta_stationary_cov = c(3,3,3,3,3,3),
n_basis_beta_stationary_cov = c(15,15,15,15,15,15),
n_intervals_quadrature = 100)
save(input_FWR_200_units_pen_0_1, file = paste0(working_dir,"/200_units_dataset/dataset/data_fdagwr/input_FWR_200_units_pen_0_1.RData"))
#############################################################
#### script to use FMSGWR, on Kami, on a 200 units input ####
#############################################################
rm(list=ls())
graphics.off()
cat("\014")
library(fdagwr)
root_dir = "~/Documents/Politecnico/INGV/fdagwr_INGV_usage/fdagwr_INGV_200_units_dataset"
data_dir = paste0(root_dir,"/dataset/data_fdagwr")
#data no penalty
load(paste0(data_dir,"/input_FMSGWR_200_units_pen_0_1.RData"))
input_data = input_FMSGWR_200_units_pen_0_1
paste0(root_dir,paste0("/",name_file))
name_file = "FMSGWR_ESC_200_units_pen_0_1_fitting.RData"
paste0(root_dir,paste0("/",name_file))
load("~/Documents/Politecnico/INGV/fdagwr_INGV_usage/fdagwr_INGV_200_units_dataset/dataset/data_fdagwr/input_FMSGWR_200_units_pen_0.RData")
load("~/Documents/Politecnico/INGV/fdagwr_INGV_usage/fdagwr_INGV_200_units_dataset/FWR_200_units_pen_0_fitting.RData")
View(FWR_200_units_pen_0_fitting)
package_dir = "/Users/andreafranzoni/Documents/Politecnico/INGV/FunctionalMultiSourceGeographicallyWeightedRegression"
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd(package_dir)
package_dir
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd(package_dir)
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(fdagwr)
installation_fdagwr()
