n_basis_stations_cov = NULL
penalization_stations_cov = c(0.1)
coordinates_stations = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_stations = 1.5
knots_beta_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stations_cov = c(3L)
n_basis_beta_stations_cov = NULL
n_intervals_quad_rule = 100
num_threads = NULL
basis_type_y_points = "bsplines"
basis_type_rec_weights_y_points = "bsplines"
basis_types_beta_stationary_cov = NULL
basis_types_beta_events_cov = NULL
basis_types_beta_stations_cov = NULL
}
}
#input params for predict
{
seed = 29011999
set.seed(seed = seed)
library(MASS)
number_to_be_pred = 2
{
coeff_stationary_cov_to_pred = list(regC1 = t(mvrnorm( n = 1, mu = rep(0,number_to_be_pred), Sigma = diag(number_to_be_pred))),
regC2 = t(mvrnorm( n = number_to_be_pred, mu = rep(0,14), Sigma = diag(14))),
regC3 = t(mvrnorm( n = number_to_be_pred, mu = rep(0,14), Sigma = diag(14))),
regC4 = t(mvrnorm( n = 1, mu = rep(0,number_to_be_pred), Sigma = diag(number_to_be_pred))),
regC5 = t(mvrnorm( n = 1, mu = rep(0,number_to_be_pred), Sigma = diag(number_to_be_pred))),
regC6 = t(mvrnorm( n = number_to_be_pred, mu = rep(0,15), Sigma = diag(15))))
coeff_events_cov_to_pred = list(regE1 = t(mvrnorm( n = number_to_be_pred, mu = rep(0,15), Sigma = diag(15))),
regE2 = t(mvrnorm( n = number_to_be_pred, mu = rep(0,15), Sigma = diag(15))))
coordinates_events_to_pred = t(mvrnorm( n = 2, mu = rep(0,number_to_be_pred), Sigma = diag(number_to_be_pred)))
coeff_stations_cov_to_pred = list(regS1 = t(mvrnorm( n = 1, mu = rep(0,number_to_be_pred), Sigma = diag(number_to_be_pred))))
coordinates_stations_to_pred = t(mvrnorm( n = 2, mu = rep(0,number_to_be_pred), Sigma = diag(number_to_be_pred)))
abscissa_ev = seq(a,b,length.out=50)
}
}
##################
#### TEST ESC ####
##################
#fitting
{
start_time_test_FMSGWR_ESC = proc.time()
test_FMSGWR_ESC=FMSGWR_ESC( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
in_cascade_estimation = FALSE,
n_knots_smoothing = 100,
n_intervals_quadrature = 10)
end_time_test_FMSGWR_ESC = proc.time() - start_time_test_FMSGWR_ESC
}
#predict
{
start_time_test_FMSGWR_ESC_predict = proc.time()
test_FMSGWR_ESC_predict = predict_FMSGWR_ESC( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
coeff_events_cov_to_pred              = coeff_events_cov_to_pred,
coordinates_events_to_pred            = coordinates_events_to_pred,
coeff_stations_cov_to_pred            = coeff_stations_cov_to_pred,
coordinates_stations_to_pred          = coordinates_stations_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FMSGWR_ESC,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature                = 10)
end_time_test_FMSGWR_ESC_predict = proc.time() - start_time_test_FMSGWR_ESC_predict
}
##################
#### TEST SEC ####
##################
#fitting
{
start_time_test_FMSGWR_SEC = proc.time()
test_FMSGWR_SEC=FMSGWR_SEC( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
in_cascade_estimation = FALSE,
n_knots_smoothing = 100,
n_intervals_quadrature = 10)
end_time_test_FMSGWR_SEC = proc.time() - start_time_test_FMSGWR_SEC
}
#predict
{
start_time_test_FMSGWR_SEC_predict = proc.time()
test_FMSGWR_SEC_predict = predict_FMSGWR_SEC( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
coeff_events_cov_to_pred              = coeff_events_cov_to_pred,
coordinates_events_to_pred            = coordinates_events_to_pred,
coeff_stations_cov_to_pred            = coeff_stations_cov_to_pred,
coordinates_stations_to_pred          = coordinates_stations_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FMSGWR_SEC,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature    = 10)
end_time_test_FMSGWR_SEC_predict = proc.time() - start_time_test_FMSGWR_SEC_predict
}
################
## TEST FMGWR ##
################
#fitting
{
start_time_test_FMGWR = proc.time()
test_FMGWR = FMGWR( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_non_stationary_cov = coeff_events_cov,
basis_types_non_stationary_cov = basis_types_events_cov,
knots_non_stationary_cov = knots_events_cov,
degrees_basis_non_stationary_cov = degrees_basis_events_cov,
n_basis_non_stationary_cov = n_basis_events_cov,
penalization_non_stationary_cov = penalization_events_cov,
coordinates_non_stationary = coordinates_events,
kernel_bandwith_non_stationary = kernel_bandwith_events,
knots_beta_non_stationary_cov = knots_beta_events_cov,
degrees_basis_beta_non_stationary_cov = degrees_basis_beta_events_cov,
n_basis_beta_non_stationary_cov = n_basis_beta_events_cov,
in_cascade_estimation = FALSE,
n_knots_smoothing = 100,
n_intervals_quadrature = 10)
end_time_test_FMGWR = proc.time() - start_time_test_FMGWR
}
#predict
{
start_time_test_FMGWR_predict = proc.time()
test_FMGWR_predict = predict_FMGWR( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
coeff_non_stationary_cov_to_pred      = coeff_events_cov_to_pred,
coordinates_non_stationary_to_pred    = coordinates_events_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FMGWR,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature    = 10)
end_time_test_FMGWR_predict = proc.time() - start_time_test_FMGWR_predict
}
################
### TEST FGWR ##
################
#fitting
{
start_time_test_FGWR = proc.time()
test_FGWR = FGWR( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_non_stationary_cov = coeff_events_cov,
basis_types_non_stationary_cov = basis_types_events_cov,
knots_non_stationary_cov = knots_events_cov,
degrees_basis_non_stationary_cov = degrees_basis_events_cov,
n_basis_non_stationary_cov = n_basis_events_cov,
penalization_non_stationary_cov = penalization_events_cov,
coordinates_non_stationary = coordinates_events,
kernel_bandwith_non_stationary = kernel_bandwith_events,
knots_beta_non_stationary_cov = knots_beta_events_cov,
degrees_basis_beta_non_stationary_cov = degrees_basis_beta_events_cov,
n_basis_beta_non_stationary_cov = n_basis_beta_events_cov,
n_intervals_quadrature = 10)
end_time_test_FGWR = proc.time() - start_time_test_FGWR
}
#predict
{
start_time_test_FGWR_predict = proc.time()
test_FGWR_predict = predict_FGWR( coeff_non_stationary_cov_to_pred      = coeff_events_cov_to_pred,
coordinates_non_stationary_to_pred    = coordinates_events_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FGWR,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature    = 10)
end_time_test_FGWR_predict = proc.time() - start_time_test_FGWR_predict
}
###############
## TEST FWR  ##
###############
test_FWR = FWR(y_points = y_points,
t_points = t_points,
left_extreme_domain = a,
right_extreme_domain = b,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
n_intervals_quadrature = 10)
test_FWR_predict = predict_FWR( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FWR)
##### BF ####
##################
#### TEST ESC ####
##################
#fitting
{
start_time_test_FMSGWR_ESC_bf = proc.time()
test_FMSGWR_ESC_bf=FMSGWR_ESC( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
in_cascade_estimation = TRUE,
n_knots_smoothing = 100,
n_intervals_quadrature = 10)
end_time_test_FMSGWR_ESC_bf = proc.time() - start_time_test_FMSGWR_ESC_bf
}
#predict
{
start_time_test_FMSGWR_ESC_bf_predict = proc.time()
test_FMSGWR_ESC_bf_predict = predict_FMSGWR_ESC( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
coeff_events_cov_to_pred              = coeff_events_cov_to_pred,
coordinates_events_to_pred            = coordinates_events_to_pred,
coeff_stations_cov_to_pred            = coeff_stations_cov_to_pred,
coordinates_stations_to_pred          = coordinates_stations_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FMSGWR_ESC_bf,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature    = 10)
end_time_test_FMSGWR_ESC_bf_predict = proc.time() - start_time_test_FMSGWR_ESC_bf_predict
}
##################
#### TEST SEC ####
##################
#fitting
{
start_time_test_FMSGWR_SEC_bf = proc.time()
test_FMSGWR_SEC_bf=FMSGWR_SEC( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
in_cascade_estimation = TRUE,
n_knots_smoothing = 100,
n_intervals_quadrature = 10)
end_time_test_FMSGWR_SEC_bf = proc.time() - start_time_test_FMSGWR_SEC_bf
}
#predict
{
start_time_test_FMSGWR_SEC_bf_predict = proc.time()
test_FMSGWR_SEC_bf_predict = predict_FMSGWR_SEC( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
coeff_events_cov_to_pred              = coeff_events_cov_to_pred,
coordinates_events_to_pred            = coordinates_events_to_pred,
coeff_stations_cov_to_pred            = coeff_stations_cov_to_pred,
coordinates_stations_to_pred          = coordinates_stations_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FMSGWR_SEC_bf,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature    = 10)
end_time_test_FMSGWR_SEC_bf_predict = proc.time() - start_time_test_FMSGWR_SEC_bf_predict
}
################
## TEST FMGWR ##
################
#fit
{
start_time_test_FMGWR_bf = proc.time()
test_FMGWR_bf = FMGWR( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_non_stationary_cov = coeff_events_cov,
basis_types_non_stationary_cov = basis_types_events_cov,
knots_non_stationary_cov = knots_events_cov,
degrees_basis_non_stationary_cov = degrees_basis_events_cov,
n_basis_non_stationary_cov = n_basis_events_cov,
penalization_non_stationary_cov = penalization_events_cov,
coordinates_non_stationary = coordinates_events,
kernel_bandwith_non_stationary = kernel_bandwith_events,
knots_beta_non_stationary_cov = knots_beta_events_cov,
degrees_basis_beta_non_stationary_cov = degrees_basis_beta_events_cov,
n_basis_beta_non_stationary_cov = n_basis_beta_events_cov,
in_cascade_estimation = TRUE,
n_knots_smoothing = 100,
n_intervals_quadrature = 10)
end_time_test_FMGWR_bf = proc.time() - start_time_test_FMGWR_bf
}
#predict
{
start_time_test_FMGWR_bf_predict = proc.time()
test_FMGWR_bf_predict = predict_FMGWR( coeff_stationary_cov_to_pred          = coeff_stationary_cov_to_pred,
coeff_non_stationary_cov_to_pred      = coeff_events_cov_to_pred,
coordinates_non_stationary_to_pred    = coordinates_events_to_pred,
units_to_be_predicted                 = number_to_be_pred,
abscissa_ev                           = abscissa_ev,
model_fitted                          = test_FMGWR_bf,
n_knots_smoothing_pred                = 100,
n_intervals_quadrature    = 10)
end_time_test_FMGWR_bf_predict = proc.time() - start_time_test_FMGWR_bf_predict
}
View(test_FMSGWR_ESC)
View(test_FMSGWR_ESC_predict)
View(test_FMSGWR_ESC_bf)
View(test_FMSGWR_ESC_bf_predict)
View(test_FMSGWR_SEC)
View(test_FMSGWR_ESC_bf)
View(test_FMSGWR_SEC_predict)
View(test_FMSGWR_SEC_bf)
View(test_FMSGWR_SEC_predict)
View(test_FMSGWR_SEC_bf_predict)
View(test_FMGWR)
View(test_FGWR_predict)
View(test_FMGWR_predict)
View(test_FMGWR_bf)
View(test_FMGWR_bf_predict)
View(test_FMGWR_bf)
View(test_FMGWR_bf_predict)
View(test_FGWR)
View(test_FGWR_predict)
View(test_FWR)
View(test_FWR_predict)
