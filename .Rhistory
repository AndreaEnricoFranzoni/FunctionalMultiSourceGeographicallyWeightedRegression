0.1)
knots_beta_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stationary_cov = c(3L,
3L,
3L,
3L,
3L,
3L)
n_basis_beta_stationary_cov = NULL
coeff_events_cov = list(regE1 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))),
regE2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_events_cov = c("bsplines",
"bsplines")
knots_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_events_cov = NULL
n_basis_events_cov = c(15L,15L)
penalization_events_cov = c(0.1,
0.1)
coordinates_events = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_events = 150000
knots_beta_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_events_cov = c(3L,
3L)
n_basis_beta_events_cov = NULL
coeff_stations_cov = list(regS1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
)
basis_types_stations_cov = c("constant")
knots_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stations_cov = NULL
n_basis_stations_cov = NULL
penalization_stations_cov = c(0.1)
coordinates_stations = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_stations = 15000
knots_beta_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stations_cov = c(3L)
n_basis_beta_stations_cov = NULL
num_threads = NULL
basis_type_y_points = "bsplines"
basis_type_rec_weights_y_points = "bsplines"
basis_types_beta_stationary_cov = NULL
basis_types_beta_events_cov = NULL
basis_types_beta_stations_cov = NULL
}
}
test_fmsgwr=fmsgwr( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(fdagwr)
#input params
{
seed = 29011999
set.seed(seed = seed)
library(MASS)
a = -2.5
b = 1
number_of_statistical_units = 10
number_of_evaluations_fd = 37
number_of_knots = 13
number_basis<-function(knots_sz,degree){return (knots_sz+degree - 1)}
{
y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_of_evaluations_fd), Sigma = diag(number_of_evaluations_fd)))
degree_basis_y_points = 3
coeff_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,n_order_basis_y_points)), Sigma = diag(number_basis(number_of_knots,n_order_basis_y_points))))
knots_y_points = seq(from = a, to = b, length.out = number_of_knots)
n_basis_y_points = NULL
degree_basis_rec_weights_y_points = 1
coeff_rec_weights_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,n_order_basis_rec_weights_y_points)), Sigma = diag(number_basis(number_of_knots,n_order_basis_rec_weights_y_points))))
n_basis_rec_weights_y_points = NULL
t_points = seq(from = a, to = b, length.out = number_of_evaluations_fd)
left_extreme_domain = a
right_extreme_domain = b
coeff_stationary_cov = list(regC1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC3 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC4 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC5 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC6 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines")
knots_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stationary_cov = NULL
n_basis_stationary_cov = c(12L,14L,14L,1L,1L,15L)
penalization_stationary_cov = c(0.1,
0.1,
0.1,
0.1,
0.1,
0.1)
knots_beta_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stationary_cov = c(3L,
3L,
3L,
3L,
3L,
3L)
n_basis_beta_stationary_cov = NULL
coeff_events_cov = list(regE1 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))),
regE2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_events_cov = c("bsplines",
"bsplines")
knots_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_events_cov = NULL
n_basis_events_cov = c(15L,15L)
penalization_events_cov = c(0.1,
0.1)
coordinates_events = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_events = 150000
knots_beta_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_events_cov = c(3L,
3L)
n_basis_beta_events_cov = NULL
coeff_stations_cov = list(regS1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
)
basis_types_stations_cov = c("constant")
knots_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stations_cov = NULL
n_basis_stations_cov = NULL
penalization_stations_cov = c(0.1)
coordinates_stations = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_stations = 15000
knots_beta_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stations_cov = c(3L)
n_basis_beta_stations_cov = NULL
num_threads = NULL
basis_type_y_points = "bsplines"
basis_type_rec_weights_y_points = "bsplines"
basis_types_beta_stationary_cov = NULL
basis_types_beta_events_cov = NULL
basis_types_beta_stations_cov = NULL
}
}
test_fmsgwr=fmsgwr( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(fdagwr)
#input params
{
seed = 29011999
set.seed(seed = seed)
library(MASS)
a = -2.5
b = 1
number_of_statistical_units = 10
number_of_evaluations_fd = 37
number_of_knots = 13
number_basis<-function(knots_sz,degree){return (knots_sz+degree - 1)}
{
y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_of_evaluations_fd), Sigma = diag(number_of_evaluations_fd)))
degree_basis_y_points = 3
coeff_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,n_order_basis_y_points)), Sigma = diag(number_basis(number_of_knots,n_order_basis_y_points))))
knots_y_points = seq(from = a, to = b, length.out = number_of_knots)
n_basis_y_points = NULL
degree_basis_rec_weights_y_points = 1
coeff_rec_weights_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,n_order_basis_rec_weights_y_points)), Sigma = diag(number_basis(number_of_knots,n_order_basis_rec_weights_y_points))))
n_basis_rec_weights_y_points = NULL
t_points = seq(from = a, to = b, length.out = number_of_evaluations_fd)
left_extreme_domain = a
right_extreme_domain = b
coeff_stationary_cov = list(regC1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC3 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC4 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC5 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC6 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines")
knots_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stationary_cov = NULL
n_basis_stationary_cov = c(12L,14L,14L,1L,1L,15L)
penalization_stationary_cov = c(0.1,
0.1,
0.1,
0.1,
0.1,
0.1)
knots_beta_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stationary_cov = c(3L,
3L,
3L,
3L,
3L,
3L)
n_basis_beta_stationary_cov = NULL
coeff_events_cov = list(regE1 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))),
regE2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_events_cov = c("bsplines",
"bsplines")
knots_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_events_cov = NULL
n_basis_events_cov = c(15L,15L)
penalization_events_cov = c(0.1,
0.1)
coordinates_events = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_events = 150000
knots_beta_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_events_cov = c(3L,
3L)
n_basis_beta_events_cov = NULL
coeff_stations_cov = list(regS1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
)
basis_types_stations_cov = c("constant")
knots_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stations_cov = NULL
n_basis_stations_cov = NULL
penalization_stations_cov = c(0.1)
coordinates_stations = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_stations = 15000
knots_beta_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stations_cov = c(3L)
n_basis_beta_stations_cov = NULL
num_threads = NULL
basis_type_y_points = "bsplines"
basis_type_rec_weights_y_points = "bsplines"
basis_types_beta_stationary_cov = NULL
basis_types_beta_events_cov = NULL
basis_types_beta_stations_cov = NULL
}
}
test_fmsgwr=fmsgwr( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(fdagwr)
#input params
{
seed = 29011999
set.seed(seed = seed)
library(MASS)
a = -2.5
b = 1
number_of_statistical_units = 10
number_of_evaluations_fd = 37
number_of_knots = 13
number_basis<-function(knots_sz,degree){return (knots_sz+degree - 1)}
{
y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_of_evaluations_fd), Sigma = diag(number_of_evaluations_fd)))
degree_basis_y_points = 3
coeff_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,n_order_basis_y_points)), Sigma = diag(number_basis(number_of_knots,n_order_basis_y_points))))
knots_y_points = seq(from = a, to = b, length.out = number_of_knots)
n_basis_y_points = NULL
degree_basis_rec_weights_y_points = 1
coeff_rec_weights_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,n_order_basis_rec_weights_y_points)), Sigma = diag(number_basis(number_of_knots,n_order_basis_rec_weights_y_points))))
n_basis_rec_weights_y_points = NULL
t_points = seq(from = a, to = b, length.out = number_of_evaluations_fd)
left_extreme_domain = a
right_extreme_domain = b
coeff_stationary_cov = list(regC1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC3 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC4 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC5 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC6 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines")
knots_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stationary_cov = NULL
n_basis_stationary_cov = c(12L,14L,14L,1L,1L,15L)
penalization_stationary_cov = c(0.1,
0.1,
0.1,
0.1,
0.1,
0.1)
knots_beta_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stationary_cov = c(3L,
3L,
3L,
3L,
3L,
3L)
n_basis_beta_stationary_cov = NULL
coeff_events_cov = list(regE1 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))),
regE2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_events_cov = c("bsplines",
"bsplines")
knots_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_events_cov = NULL
n_basis_events_cov = c(15L,15L)
penalization_events_cov = c(0.1,
0.1)
coordinates_events = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_events = 150000
knots_beta_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_events_cov = c(3L,
3L)
n_basis_beta_events_cov = NULL
coeff_stations_cov = list(regS1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
)
basis_types_stations_cov = c("constant")
knots_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stations_cov = NULL
n_basis_stations_cov = NULL
penalization_stations_cov = c(0.1)
coordinates_stations = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_stations = 15000
knots_beta_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stations_cov = c(3L)
n_basis_beta_stations_cov = NULL
num_threads = NULL
basis_type_y_points = "bsplines"
basis_type_rec_weights_y_points = "bsplines"
basis_types_beta_stationary_cov = NULL
basis_types_beta_events_cov = NULL
basis_types_beta_stations_cov = NULL
}
}
test_fmsgwr=fmsgwr( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov)
