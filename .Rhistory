n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
n_intervals_trapezoidal_quadrature = 10,
target_error_trapezoidal_quadrature = 1,
max_iterations_trapezoidal_quadrature = 3)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(fdagwr)
#input params
{
seed = 29011999
set.seed(seed = seed)
library(MASS)
a = -2.5
b = 1
number_of_statistical_units = 10
number_of_evaluations_fd = 37
number_of_knots = 13
number_basis<-function(knots_sz,degree){return (knots_sz+degree - 1)}
{
y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_of_evaluations_fd), Sigma = diag(number_of_evaluations_fd)))
degree_basis_y_points = 3
coeff_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,degree_basis_y_points)), Sigma = diag(number_basis(number_of_knots,degree_basis_y_points))))
knots_y_points = seq(from = a, to = b, length.out = number_of_knots)
n_basis_y_points = NULL
degree_basis_rec_weights_y_points = 1
coeff_rec_weights_y_points = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,number_basis(number_of_knots,degree_basis_rec_weights_y_points)), Sigma = diag(number_basis(number_of_knots,degree_basis_rec_weights_y_points))))
n_basis_rec_weights_y_points = NULL
t_points = seq(from = a, to = b, length.out = number_of_evaluations_fd)
left_extreme_domain = a
right_extreme_domain = b
coeff_stationary_cov = list(regC1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC3 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,14), Sigma = diag(14))),
regC4 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC5 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units))),
regC6 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_stationary_cov = c("constant",
"bsplines",
"bsplines",
"constant",
"constant",
"bsplines")
knots_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stationary_cov = NULL
n_basis_stationary_cov = c(12L,14L,14L,1L,1L,15L)
penalization_stationary_cov = c(0.1,
0.1,
0.1,
0.1,
0.1,
0.1)
knots_beta_stationary_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stationary_cov = c(3L,
3L,
3L,
3L,
3L,
3L)
n_basis_beta_stationary_cov = NULL
coeff_events_cov = list(regE1 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))),
regE2 = t(mvrnorm( n = number_of_statistical_units, mu = rep(0,15), Sigma = diag(15))))
basis_types_events_cov = c("bsplines",
"bsplines")
knots_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_events_cov = NULL
n_basis_events_cov = c(15L,15L)
penalization_events_cov = c(0.1,
0.1)
coordinates_events = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_events = 1.5
knots_beta_events_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_events_cov = c(3L,
3L)
n_basis_beta_events_cov = NULL
coeff_stations_cov = list(regS1 = t(mvrnorm( n = 1, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
)
basis_types_stations_cov = c("constant")
knots_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_stations_cov = NULL
n_basis_stations_cov = NULL
penalization_stations_cov = c(0.1)
coordinates_stations = t(mvrnorm( n = 2, mu = rep(0,number_of_statistical_units), Sigma = diag(number_of_statistical_units)))
kernel_bandwith_stations = 1.5
knots_beta_stations_cov = seq(from = a, to = b, length.out = number_of_knots)
degrees_basis_beta_stations_cov = c(3L)
n_basis_beta_stations_cov = NULL
n_intervals_quad_rule = 100
num_threads = NULL
basis_type_y_points = "bsplines"
basis_type_rec_weights_y_points = "bsplines"
basis_types_beta_stationary_cov = NULL
basis_types_beta_events_cov = NULL
basis_types_beta_stations_cov = NULL
}
}
test_fmsgwr=FMSGWR( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
n_intervals_trapezoidal_quadrature = 10,
target_error_trapezoidal_quadrature = 1,
max_iterations_trapezoidal_quadrature = 3)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(fdagwr)
test_fmsgwr=FMSGWR( y_points = y_points,
coeff_y_points = coeff_y_points,
knots_y_points = knots_y_points,
degree_basis_y_points = degree_basis_y_points,
n_basis_y_points = n_basis_y_points,
coeff_rec_weights_y_points = coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = n_basis_rec_weights_y_points,
t_points = t_points,
left_extreme_domain = left_extreme_domain,
right_extreme_domain = right_extreme_domain,
coeff_stationary_cov = coeff_stationary_cov,
basis_types_stationary_cov = basis_types_stationary_cov,
knots_stationary_cov = knots_stationary_cov,
degrees_basis_stationary_cov = degrees_basis_stationary_cov,
n_basis_stationary_cov = n_basis_stationary_cov,
penalization_stationary_cov = penalization_stationary_cov,
knots_beta_stationary_cov = knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = n_basis_beta_stationary_cov,
coeff_events_cov = coeff_events_cov,
basis_types_events_cov = basis_types_events_cov,
knots_events_cov = knots_events_cov,
degrees_basis_events_cov = degrees_basis_events_cov,
n_basis_events_cov = n_basis_events_cov,
penalization_events_cov = penalization_events_cov,
coordinates_events = coordinates_events,
kernel_bandwith_events = kernel_bandwith_events,
knots_beta_events_cov = knots_beta_events_cov,
degrees_basis_beta_events_cov = degrees_basis_beta_events_cov,
n_basis_beta_events_cov = n_basis_beta_events_cov,
coeff_stations_cov = coeff_stations_cov,
basis_types_stations_cov = basis_types_stations_cov,
knots_stations_cov = knots_stations_cov,
degrees_basis_stations_cov = degrees_basis_stations_cov,
n_basis_stations_cov = n_basis_stations_cov,
penalization_stations_cov = penalization_stations_cov,
coordinates_stations = coordinates_stations,
kernel_bandwith_stations = kernel_bandwith_stations,
knots_beta_stations_cov = knots_beta_stations_cov,
degrees_basis_beta_stations_cov = degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = n_basis_beta_stations_cov,
n_intervals_trapezoidal_quadrature = 10,
target_error_trapezoidal_quadrature = 1,
max_iterations_trapezoidal_quadrature = 3)
View(test_fmsgwr)
test_fmsgwr[["be"]][[10]]
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
library(devtools)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(Rcpp)
library(RcppEigen)
library(devtools) &> build_log.txt
library(devtools)
library(withr)
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
) &> build_log.txt
sink("build_log.txt", split = TRUE)  # salva e mostra anche a schermo
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github(
"AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression",
dependencies = TRUE,
force = TRUE
)
)
sink()  # chiudi la redirezione
getwd()
setwd("/Users/andreafranzoni/Documents/INGV")
sink("build_log.txt", split = TRUE)  # salva e mostra anche a schermo
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github(
"AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression",
dependencies = TRUE,
force = TRUE
)
)
sink()  # chiudi la redirezione
setwd("/Users/andreafranzoni/Documents/INGV")
cmd <- "Rscript"
args <- c(
"-e",
"withr::with_path(
new = '/usr/local/opt/llvm/bin',
devtools::install_github(
'AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression',
dependencies = TRUE,
force = TRUE
)
)"
)
system2(cmd, args, stdout = "build_log.txt", stderr = "build_log.txt")
setwd("/Users/andreafranzoni/Documents/INGV")
cmd <- "Rscript"
args <- c(
"-e",
"withr::with_path(
new = '/usr/local/opt/llvm/bin',
devtools::install_github(
'AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression',
dependencies = TRUE,
force = TRUE
)
)"
)
system2(command = cmd, args = args, stdout = "build_log.txt", stderr = "build_log.txt")
setwd("/Users/andreafranzoni/Documents/INGV")
cmd <- "Rscript"
args <- c(
"-e",
"withr::with_path(
new = '/usr/local/opt/llvm/bin',
devtools::install_github(
'AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression',
dependencies = TRUE,
force = TRUE
)
)"
)
system2(command = cmd, args = args, stdout = "build_log.txt", stderr = "build_log.txt")
setwd("/Users/andreafranzoni/Documents/INGV")
cmd <- "Rscript"
expr <- "withr::with_path(
new = '/usr/local/opt/llvm/bin',
devtools::install_github(
'AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression',
dependencies = TRUE,
force = TRUE
)
)"
args <- c("-e", shQuote(expr))
system2(cmd, args, stdout = "build_log.txt", stderr = "build_log.txt")
Rcpp::Rcpp.package.skeleton("RcppKamiClusterTesting")
Rcpp.package.skeleton("RcppKamiClusterTesting")
Rcpp.package.skeleton("RcppKamiClusterTesting")
package_dir = "/Users/andreafranzoni/Documents/INGV/RcppKamiClusterTesting"
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd(package_dir)
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/RcppKamiClusterTesting", dependencies = TRUE,force = TRUE)
)
library(RcppKamiClusterTesting)
installation_kami_testing()
package_dir = "/Users/andreafranzoni/Documents/INGV/RcppKamiClusterTesting"
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd(package_dir)
#then
Rcpp::compileAttributes(".")
library(Rcpp)
package_dir = "/Users/andreafranzoni/Documents/INGV/RcppKamiClusterTesting"
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd(package_dir)
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/RcppKamiClusterTesting", dependencies = TRUE,force = TRUE)
)
library(RcppKamiClusterTesting)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/RcppKamiClusterTesting", dependencies = TRUE,force = TRUE)
)
library(RcppKamiClusterTesting)
installation_kami_testing()
kami_testing()
package_dir = "/Users/andreafranzoni/Documents/INGV/FunctionalMultiSourceGeographicallyWeightedRegression"
#DO NOT CHANGE FROM HERE
#to uploda the package
#change here the directory
setwd(package_dir)
#then
Rcpp::compileAttributes(".")
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/FunctionalMultiSourceGeographicallyWeightedRegression", dependencies = TRUE,force = TRUE)
)
fdagwr_testing()
library(fdagwr)
fdagwr_testing()
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/RcppKamiClusterTesting", dependencies = TRUE,force = TRUE)
)
library(Rcpp)
library(RcppEigen)
library(devtools)
library(withr)
#per usare clang all'ultima versione
withr::with_path(
new = "/usr/local/opt/llvm/bin",
devtools::install_github("AndreaEnricoFranzoni/RcppKamiClusterTesting", dependencies = TRUE,force = TRUE)
)
library(RcppKamiClusterTesting)
installation_kami_testing()
kami_testing()
###################################################
#### script to use fdagwr on a 200 units input ####
###################################################
rm(list=ls())
graphics.off()
cat("\014")
library(fdagwr)
root_dir = "/Users/andreafranzoni/Documents/INGV"
data_dir = paste0(root_dir,"/test_ingv/200_units/dataset/data_fdagwr")
#data no penalty
load(paste0(data_dir,"/input_fdagwr_200_units_pen_0.RData"))
input_data = input_fdagwr_200_units_pen_0
View(input_data)
fdagwr_200_units_pen_0 = FMSGWR_ESC(y_points = input_data$y_points,
t_points = input_data$t_points,
left_extreme_domain = input_data$left_extreme_domain,
right_extreme_domain = input_data$right_extreme_domain,
coeff_y_points = input_data$coeff_y_points,
knots_y_points = input_data$knots_y_points,
degree_basis_y_points = input_data$degree_basis_y_points,
n_basis_y_points = input_data$n_basis_y_points,
coeff_rec_weights_y_points = input_data$coeff_rec_weights_y_points,
degree_basis_rec_weights_y_points = input_data$degree_basis_rec_weights_y_points,
n_basis_rec_weights_y_points = input_data$n_basis_rec_weights_y_points,
coeff_stationary_cov = input_data$coeff_stationary_cov,
basis_types_stationary_cov = input_data$basis_types_stationary_cov,
knots_stationary_cov = input_data$knots_stationary_cov,
degrees_basis_stationary_cov = input_data$degrees_basis_stationary_cov,
n_basis_stationary_cov = input_data$n_basis_stationary_cov,
penalization_stationary_cov = input_data$penalization_stationary_cov,
knots_beta_stationary_cov = input_data$knots_beta_stationary_cov,
degrees_basis_beta_stationary_cov = input_data$degrees_basis_beta_stationary_cov,
n_basis_beta_stationary_cov = input_data$n_basis_beta_stationary_cov,
coeff_events_cov = input_data$coeff_events_cov,
basis_types_events_cov = input_data$basis_types_events_cov,
knots_events_cov = input_data$knots_events_cov,
degrees_basis_events_cov = input_data$degrees_basis_events_cov,
n_basis_events_cov = input_data$n_basis_events_cov,
penalization_events_cov = input_data$penalization_events_cov,
coordinates_events = input_data$coordinates_events,
kernel_bandwith_events = input_data$kernel_bandwith_events,
knots_beta_events_cov = input_data$knots_beta_events_cov,
degrees_basis_beta_events_cov = input_data$degrees_basis_beta_events_cov,
n_basis_beta_events_cov = input_data$n_basis_beta_events_cov,
coeff_stations_cov = input_data$coeff_stations_cov,
basis_types_stations_cov = input_data$basis_types_stations_cov,
knots_stations_cov = input_data$knots_stations_cov,
degrees_basis_stations_cov = input_data$degrees_basis_stations_cov,
n_basis_stations_cov = input_data$n_basis_stations_cov,
penalization_stations_cov = input_data$penalization_stations_cov,
coordinates_stations = input_data$coordinates_stations,
kernel_bandwith_stations = input_data$kernel_bandwith_stations,
knots_beta_stations_cov = input_data$knots_beta_stations_cov,
degrees_basis_beta_stations_cov = input_data$degrees_basis_beta_stations_cov,
n_basis_beta_stations_cov = input_data$n_basis_beta_stations_cov,
bf_estimation = TRUE,
n_knots_smoothing = input_data$n_knots_smoothing,
n_intervals_trapezoidal_quadrature = input_data$n_intervals_trapezoidal_quadrature,
target_error_trapezoidal_quadrature = input_data$target_error_trapezoidal_quadrature,
max_iterations_trapezoidal_quadrature = input_data$max_iterations_trapezoidal_quadrature)
View(fdagwr_200_units_pen_0)
name_file = fdagwr_200_units_pen_0
save(fdagwr_200_units_pen_0, file = paste0(root_dir,paste0("/test_ingv/200_units/",name_file)))
paste0(root_dir,paste0("/test_ingv/200_units/",name_file))
name_file = "fdagwr_200_units_pen_0"
paste0(root_dir,paste0("/test_ingv/200_units/",name_file))
name_file = "fdagwr_200_units_pen_0.R"
save(fdagwr_200_units_pen_0, file = paste0(root_dir,paste0("/test_ingv/200_units/",name_file)))
###################################################
#### script to use fdagwr on a 200 units input ####
###################################################
rm(list=ls())
graphics.off()
cat("\014")
library(fdagwr)
root_dir = "/Users/andreafranzoni/Documents/INGV"
name_file = "fdagwr_200_units_pen_0.R"
load(paste0(root_dir,paste0("/test_ingv/200_units/",name_file))))
load(paste0(root_dir,paste0("/test_ingv/200_units/",name_file)))
View(fdagwr_200_units_pen_0)
